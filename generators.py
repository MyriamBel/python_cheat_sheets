"""
Генераторы - объекты, которые генерируют следующее значение на основе текущего значения и некоторого правила.
Генератор не находит значение всех своих элементов, он их вычисляет по 1 за раз.
Вычисление каждого элемента происходит 1 раз, к предыдущему элементу нельзя вернуться, так как он теряется при
переходе к следующему элементу. Если нужно снова получить какой-то элемент, нужно запустить генератор заново.
Каждое следующее значение вызывается методом next(element).
В конце, после прохода по всем элемента этот метод возвращает исключение StopIteration.
При проходе в цикле метод next() вызывается неявно.
Генераторы удобно использовать для экономии памяти и когда некоторое значение нужно выдернуть из большого потока
данных.
"""
# a = (i for i in range(1, 5))
# print(a)
# print(next(a))
# for obj in a:
#     print(obj)
######################


# # Пример работы с файлом построчно с помощью генератора. Например, нужно сохранить все записи об ошибках из
# лога:
# with open('log.txt', 'r') as log_file:
#     err_list = [st for st in log_file if 'error' in st]
# # Этот стандартный способ плох тем, что при большом количестве данных может возникнуть переполнение.
# # С генератором:
# with open('log.txt', 'r') as log_file:
#     str_generator = (st for st in log_file if 'error' in st)
#     for error in str_generator:
#         print(error)

# Генераторы можно создавать не только в виде генераторных выражений, но и в виде функций. Вместо return
# (возврат значения) в ней используется команда yeld  - она возвращает значение и приостанавливает работу функции.

# # Допустим, нужно посчитать сумму чисел до заданного числа:
# def gen_fun(perem):
#     result = 0
#     for i in range(1, perem):
#         print("Сумма чисел: {}, текущее число: {}".format(result, i))
#         result += i
#         yield result
#
#
# a = gen_fun(5)
# for i in a:
#     print(i)

# Генераторы построены на итераторах. Итераторы можно создать из любого итерируемого объекта с помощью функции
# iter(). Также можно создать вручную, но это долго и сложно. Нужно прописать методы __next__(), __iter__()
# Еще один пример прохождения в цикле по итератору, созданному с помощью функции iter():
list_fruits = ['apple', 'bananas', 'pineapple', 'lime', 'watermelon']
iter_fruits = iter(list_fruits)
while True:
    try:
        print(next(iter_fruits))
    except StopIteration:
        break
# Важное замечание: функция iter() принимает только итерируемые объекты, являющиеся последовательностями. Это:
# списки, кортежи, строки - все, где есть доступ к элементам по индексу.
# Генератор поддерживает такие методы, как:
# .close(), .throw(), .send()
